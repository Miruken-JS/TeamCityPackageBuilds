package Javascript_MirukenJs.patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2017_2.*
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.PowerShellStep
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.powerShell
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2017_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with uuid = '983f8966-9172-49d6-89b2-4ca5acbe22f8_PreReleaseBuild' (id = 'Javascript_MirukenJs_Core2_PreReleaseBuild')
accordingly and delete the patch script.
*/
changeBuildType("983f8966-9172-49d6-89b2-4ca5acbe22f8_PreReleaseBuild") {
    expectSteps {
        powerShell {
            name = "Set Package Version"
            formatStderrAsError = true
            scriptMode = script {
                content = """
                    ${'$'}version = ${'$'}args[0]
                    
                    if(!${'$'}version){
                        throw "version is empty"
                    }
                    
                    ${'$'}package = Get-Content "package.json" -Raw
                    ${'$'}updated = ${'$'}package -replace '"(version)"\s*:\s*"(.*)"', ${TQ}version"": ""${'$'}version$TQ
                    ${'$'}updated | Set-Content 'package.json'
                    
                    Write-Host "Updated package.json to version ${'$'}version"
                """.trimIndent()
            }
            param("jetbrains_powershell_scriptArguments", "%PackageVersion%")
        }
        script {
            name = "Yarn Install"
            scriptContent = "%yarn% install"
        }
        script {
            name = "JSPM Install"
            scriptContent = "%jspm% install"
        }
        script {
            name = "Test"
            scriptContent = "%gulp% test"
        }
        script {
            name = "Build"
            scriptContent = "%gulp% build"
        }
    }
    steps {
        update<PowerShellStep>(0) {
            scriptMode = script {
                content = """
                    try {
                        ${'$'}hash = "%system.build.vcs.number%"
                        ${'$'}shortHash = ${'$'}hash.substring(0,7)
                        ${'$'}buildNumber = "%SemanticVersion%%PrereleaseVersion%-${'$'}shortHash"
                        
                        Write-Host "shortHash: ${'$'}shortHash"
                        Write-Host "buildNumber: ${'$'}buildNumber"
                    
                        Write-Host "##teamcity[setParameter name='GitShortHash' value='${'$'}shortHash']"
                        Write-Host "##teamcity[buildNumber '${'$'}buildNumber']"
                    } catch {
                        return 1
                    }
                    
                    return 0
                """.trimIndent()
            }
            param("jetbrains_powershell_scriptArguments", "")
        }
        insert(1) {
            powerShell {
                name = "Set Package Version (1)"
                formatStderrAsError = true
                scriptMode = script {
                    content = """
                        try {
                            ${'$'}version = ${'$'}args[0]
                        
                            if(!${'$'}version){
                                throw "version is empty"
                            }
                        
                            ${'$'}package = Get-Content "package.json" -Raw
                            ${'$'}updated = ${'$'}package -replace '"(version)"\s*:\s*"(.*)"', ${TQ}version"": ""${'$'}version$TQ
                            ${'$'}updated | Set-Content 'package.json'
                        
                            Write-Host "Updated package.json to version ${'$'}version"
                        } catch {
                            return 1
                        }
                        return 0
                    """.trimIndent()
                }
                param("jetbrains_powershell_scriptArguments", "%PackageVersion%")
            }
        }
        update<ScriptBuildStep>(2) {
            enabled = false
        }
        update<ScriptBuildStep>(3) {
            enabled = false
        }
        update<ScriptBuildStep>(4) {
            enabled = false
        }
        update<ScriptBuildStep>(5) {
            enabled = false
        }
    }
}
